import json
import boto3
import os
from datetime import datetime

dynamodb = boto3.resource('dynamodb')
TOKENS_TABLE = os.environ.get("TOKENS_TABLE_NAME")

def lambda_handler(event, context):
    try:
        body = event
        if isinstance(event.get("body"), str):
            body = json.loads(event["body"])

        token = body.get("token")
        if not token:
            return {
                'statusCode': 403,
                'body': json.dumps({'error': 'Token no proporcionado'})
            }

        tabla_tokens = dynamodb.Table(TOKENS_TABLE)
        response = tabla_tokens.get_item(Key={'token': token})

        if 'Item' not in response:
            return {
                'statusCode': 403,
                'body': json.dumps({'error': 'Token inválido'})
            }

        item = response['Item']
        expires = item.get("expires")

        if not expires:
            return {
                'statusCode': 403,
                'body': json.dumps({'error': 'Token inválido'})
            }
          
        now = datetime.utcnow()
        token_time = datetime.strptime(expires, "%Y-%m-%d %H:%M:%S")
        if now > token_time:
            return {
                'statusCode': 403,
                'body': json.dumps({'error': 'Token expirado'})
            }

        return {
            'statusCode': 200,
            'body': json.dumps({'message': 'Token válido'})
        }

    except Exception as e:
        return {
            'statusCode': 500,
            'body': json.dumps({'error': 'Error interno del servidor'})
        }
